<?php

namespace App\Exports;

use Maatwebsite\Excel\Concerns\FromArray;
use Maatwebsite\Excel\Concerns\WithStyles;
use Maatwebsite\Excel\Concerns\WithColumnWidths;
use Maatwebsite\Excel\Concerns\WithEvents;
use Maatwebsite\Excel\Concerns\WithCustomStartCell;
use Maatwebsite\Excel\Events\AfterSheet;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;
use PhpOffice\PhpSpreadsheet\Style\Alignment;
use PhpOffice\PhpSpreadsheet\Style\Border;
use PhpOffice\PhpSpreadsheet\Style\Fill;
use PhpOffice\PhpSpreadsheet\Style\Font;
use PhpOffice\PhpSpreadsheet\Worksheet\Drawing;
use App\Models\Document;
use App\Models\MappedControlsCompliance;
use App\Models\User;
use Carbon\Carbon;

class ControlDocumentAuditResultsExport implements FromArray, WithStyles, WithColumnWidths, WithEvents, WithCustomStartCell
{
    protected $auditData;
    protected $evidenceData = [];
    protected $companyName;
    protected $auditTitle;

    public function __construct($auditId, $companyName = "King Saud University")
    {
        $this->companyName = $companyName;
        $this->auditData = MappedControlsCompliance::with([
            'controlDocuments.controls:id,short_name',
        ])->findOrFail($auditId);
        
        $this->auditTitle = "Control Document Audit Results";
        
        $plannedDate = $this->auditData->start_date;
        $query = collect();

        foreach ($this->auditData->controlDocuments as $doc) {
            $policies = $doc->document_actions['policies'] ?? [];

            $normalizedPolicies = collect($policies)->map(function ($p) {
                return is_array($p) ? $p : ['id' => (int) $p];
            });

            $policyIds = $normalizedPolicies->pluck('id')->toArray();
            $policyModels = Document::whereIn('id', $policyIds)->get(['id', 'document_name']);

            foreach ($policyModels as $policy) {
                $policyMeta = $normalizedPolicies->firstWhere('id', $policy->id);

                $reviewer = null;
                if (!empty($policyMeta['updated_by'])) {
                    $user = User::find($policyMeta['updated_by']);
                    $reviewer = $user?->name;
                }

                $action = null;
                $statusColor = 'FFFFFF'; // Default white
                if (($policyMeta['status'] ?? null) === 'approved') {
                    $action = '✔ Approved';
                } elseif (($policyMeta['status'] ?? null) === 'rejected') {
                    $action = '✘ Rejected';
                } else {
                    $action = 'Pending';
                }

                $query->push([
                    'control_name'  => $doc->controls?->short_name ?? '—',
                    'document_name' => $policy->document_name,
                    'planned_date'  => $plannedDate ? Carbon::parse($plannedDate)->format('Y-m-d') : null,
                    'review_date'   => !empty($policyMeta['updated_at']) ? Carbon::parse($policyMeta['updated_at'])->format('Y-m-d') : null,
                    'reviewer'      => $reviewer,
                    'action'        => $action,
                    'review_notes'  => $policyMeta['note'] ?? null,
                ]);
            }
        }

        $this->evidenceData = $query->toArray();
    }

    public function array(): array
    {
        // Get reviewer names dynamically
        $reviewerNames = '---';
        if (!empty($this->auditData->reviewer_id)) {
            $userIds = explode(',', $this->auditData->reviewer_id);
            $userNames = User::whereIn('id', $userIds)->pluck('name')->toArray();
            $reviewerNames = implode(', ', $userNames) ?: '---';
        }
        
        // Get version from audit ID
        $version = $this->auditData->id ?? '1';
        
        // Get date from start_date
        $reviewDate = $this->auditData->start_date ? Carbon::parse($this->auditData->start_date)->format('d/m/Y') : '15/1/2024';
        
        // Get description
        $description = $this->auditData->description ?? '---';

        $introductionData = [
            ['Document Revision History'],
            ['Reviewer', 'Version', 'Date', 'Description'],
            [$reviewerNames, $version, $reviewDate, $description],
            ['', '', '', ''],
            ['', '', '', ''],
            ['Audit Purpose:'],
            ['This report provides a comprehensive overview of the control document audit results.'],
            ['It includes details about each control, associated documents, review dates, and actions taken.'],
            ['', '', '', ''],
            ['Report Generated on: ' . Carbon::now()->format('F j, Y')],
            ['Generated By: ' . (auth()->user()->name ?? 'System')],
            ['', '', '', ''],
            ['', '', '', ''],
            ['', '', '', ''],
        ];
        
        $headerRow = [
            ['Control Name', 'Document Name', 'Planned Date', 'Review Date', 'Reviewer', 'Action', 'Review Notes']
        ];
        
        return array_merge($introductionData, $headerRow, $this->evidenceData);
    }

    public function startCell(): string
    {
        return 'A1';
    }

    public function styles(Worksheet $sheet)
    {
        $totalDataRows = count($this->evidenceData);
        $dataStartRow = 15; // After introduction
        
        return [
            // Title
            1 => [
                'font' => ['bold' => true, 'size' => 16, 'color' => ['rgb' => '1F4E78']],
                'alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]
            ],
            
            // Revision header
            2 => [
                'font' => ['bold' => true, 'color' => ['rgb' => 'FFFFFF']],
                'fill' => [
                    'fillType' => Fill::FILL_SOLID,
                    'color' => ['rgb' => '1F4E78']
                ]
            ],
            
            // Revision data row
            3 => [
                'fill' => [
                    'fillType' => Fill::FILL_SOLID,
                    'color' => ['rgb' => 'F2F2F2'] // Light gray background
                ]
            ],
            
            // Purpose
            6 => [
                'font' => ['bold' => true, 'size' => 12],
            ],
            
            // Generated info
            10 => [
                'font' => ['italic' => true],
            ],
            
            // Header row
            $dataStartRow => [
                'font' => ['bold' => true, 'color' => ['rgb' => 'FFFFFF']],
                'alignment' => ['horizontal' => Alignment::HORIZONTAL_CENTER, 'vertical' => Alignment::VERTICAL_CENTER],
                'fill' => [
                    'fillType' => Fill::FILL_SOLID,
                    'color' => ['rgb' => '1F4E78'] // Dark blue
                ]
            ],
            
            // Data rows
            'A' . ($dataStartRow + 1) . ':G' . ($totalDataRows + $dataStartRow) => [
                'alignment' => [
                    'vertical' => Alignment::VERTICAL_CENTER,
                    'horizontal' => Alignment::HORIZONTAL_LEFT,
                ],
                'borders' => [
                    'allBorders' => [
                        'borderStyle' => Border::BORDER_THIN,
                        'color' => ['rgb' => 'D9D9D9']
                    ]
                ]
            ],
            
            // Notes column specific style
            'G' . ($dataStartRow + 1) . ':G' . ($totalDataRows + $dataStartRow) => [
                'alignment' => [
                    'vertical' => Alignment::VERTICAL_CENTER,
                    'horizontal' => Alignment::HORIZONTAL_LEFT,
                    'wrapText' => true
                ]
            ],
            
            // Action column specific style
            'F' . ($dataStartRow + 1) . ':F' . ($totalDataRows + $dataStartRow) => [
                'alignment' => [
                    'vertical' => Alignment::VERTICAL_CENTER,
                    'horizontal' => Alignment::HORIZONTAL_CENTER
                ]
            ],
            
            // All introduction cells
            'A1:D14' => [
                'alignment' => [
                    'vertical' => Alignment::VERTICAL_TOP,
                ],
            ],
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 25, // Control Name
            'B' => 35, // Document Name
            'C' => 15, // Planned Date
            'D' => 15, // Review Date
            'E' => 25, // Reviewer
            'F' => 15, // Action
            'G' => 40, // Review Notes
        ];
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function (AfterSheet $event) {
                $sheet = $event->sheet->getDelegate();
                $totalDataRows = count($this->evidenceData);
                $dataStartRow = 16; // After introduction
                
                // Add logo
                $drawing = new Drawing();
                $drawing->setName('Logo');
                $drawing->setDescription('Logo');
                $drawing->setPath(public_path('images/ksu-logo.png'));
                $drawing->setHeight(70);
                $drawing->setCoordinates('F1');
                $drawing->setWorksheet($sheet);
                
                // Set company name
                $sheet->setCellValue('F3', $this->companyName);
                $sheet->getStyle('F3')->applyFromArray([
                    'font' => ['bold' => true, 'size' => 14, 'color' => ['rgb' => '1F4E78']],
                ]);
                
                // Merge company name cells
                $sheet->mergeCells('F3:H3');
                
                // Add borders to revision history
                $sheet->getStyle('A2:D4')->applyFromArray([
                    'borders' => [
                        'allBorders' => [
                            'borderStyle' => Border::BORDER_THIN,
                            'color' => ['rgb' => '000000']
                        ]
                    ]
                ]);
                
                // Format revision history header
                $sheet->getStyle('A2:D2')->applyFromArray([
                    'alignment' => [
                        'horizontal' => Alignment::HORIZONTAL_CENTER,
                    ]
                ]);
                
                // Format revision history data
                $sheet->getStyle('A3:D3')->applyFromArray([
                    'alignment' => [
                        'horizontal' => Alignment::HORIZONTAL_LEFT,
                    ]
                ]);
                

                
                // Apply zebra striping to data rows
                for ($i = $dataStartRow + 1; $i < $totalDataRows + $dataStartRow + 1; $i++) {
                    if ($i % 2 == 0) {
                        $sheet->getStyle('A' . $i . ':G' . $i)->applyFromArray([
                            'fill' => [
                                'fillType' => Fill::FILL_SOLID,
                                'color' => ['rgb' => 'F2F2F2'] // Light gray for even rows
                            ]
                        ]);
                    }
                }
                
                // Format date columns
                $sheet->getStyle('C' . ($dataStartRow + 1) . ':D' . ($totalDataRows + $dataStartRow))->applyFromArray([
                    'alignment' => [
                        'horizontal' => Alignment::HORIZONTAL_CENTER
                    ],
                    'numberFormat' => [
                        'formatCode' => 'yyyy-mm-dd'
                    ]
                ]);
                
                // Add summary section
                $summaryRow = $totalDataRows + $dataStartRow + 2;
                $sheet->setCellValue('A' . $summaryRow, 'SUMMARY');
                $sheet->getStyle('A' . $summaryRow)->applyFromArray([
                    'font' => ['bold' => true, 'size' => 14, 'color' => ['rgb' => '1F4E78']],
                    'fill' => [
                        'fillType' => Fill::FILL_SOLID,
                        'color' => ['rgb' => 'DDEBF7'] // Light blue
                    ]
                ]);
                $sheet->mergeCells('A' . $summaryRow . ':G' . $summaryRow);
                $sheet->getStyle('A' . $summaryRow . ':G' . $summaryRow)->applyFromArray([
                    'alignment' => [
                        'horizontal' => Alignment::HORIZONTAL_CENTER
                    ],
                    'borders' => [
                        'outline' => [
                            'borderStyle' => Border::BORDER_MEDIUM,
                            'color' => ['rgb' => '1F4E78']
                        ]
                    ]
                ]);
                
                // Approved count
                $approvedCount = count(array_filter($this->evidenceData, function($item) {
                    return strpos($item['action'], 'Approved') !== false;
                }));
                
                $sheet->setCellValue('A' . ($summaryRow + 1), 'Approved Documents:');
                $sheet->setCellValue('B' . ($summaryRow + 1), $approvedCount);
                $sheet->getStyle('A' . ($summaryRow + 1) . ':B' . ($summaryRow + 1))->applyFromArray([
                    'fill' => [
                        'fillType' => Fill::FILL_SOLID,
                        'color' => ['rgb' => 'E2EFDA'] // Very light green
                    ],
                    'borders' => [
                        'outline' => [
                            'borderStyle' => Border::BORDER_THIN,
                            'color' => ['rgb' => 'A9D08E']
                        ]
                    ]
                ]);
                $sheet->getStyle('B' . ($summaryRow + 1))->applyFromArray([
                    'alignment' => [
                        'horizontal' => Alignment::HORIZONTAL_CENTER
                    ],
                    'font' => ['bold' => true, 'size' => 12]
                ]);
                
                // Rejected count
                $rejectedCount = count(array_filter($this->evidenceData, function($item) {
                    return strpos($item['action'], 'Rejected') !== false;
                }));
                
                $sheet->setCellValue('D' . ($summaryRow + 1), 'Rejected Documents:');
                $sheet->setCellValue('E' . ($summaryRow + 1), $rejectedCount);
                $sheet->getStyle('D' . ($summaryRow + 1) . ':E' . ($summaryRow + 1))->applyFromArray([
                    'fill' => [
                        'fillType' => Fill::FILL_SOLID,
                        'color' => ['rgb' => 'FCE4D6'] // Very light red
                    ],
                    'borders' => [
                        'outline' => [
                            'borderStyle' => Border::BORDER_THIN,
                            'color' => ['rgb' => 'FF7C80']
                        ]
                    ]
                ]);
                $sheet->getStyle('E' . ($summaryRow + 1))->applyFromArray([
                    'alignment' => [
                        'horizontal' => Alignment::HORIZONTAL_CENTER
                    ],
                    'font' => ['bold' => true, 'size' => 12]
                ]);
                
                // Pending count
                $pendingCount = count(array_filter($this->evidenceData, function($item) {
                    return strpos($item['action'], 'Pending') !== false;
                }));
                
                $sheet->setCellValue('A' . ($summaryRow + 2), 'Pending Documents:');
                $sheet->setCellValue('B' . ($summaryRow + 2), $pendingCount);
                $sheet->getStyle('A' . ($summaryRow + 2) . ':B' . ($summaryRow + 2))->applyFromArray([
                    'fill' => [
                        'fillType' => Fill::FILL_SOLID,
                        'color' => ['rgb' => 'FFF2CC'] // Very light yellow
                    ],
                    'borders' => [
                        'outline' => [
                            'borderStyle' => Border::BORDER_THIN,
                            'color' => ['rgb' => 'FFD966']
                        ]
                    ]
                ]);
                $sheet->getStyle('B' . ($summaryRow + 2))->applyFromArray([
                    'alignment' => [
                        'horizontal' => Alignment::HORIZONTAL_CENTER
                    ],
                    'font' => ['bold' => true, 'size' => 12]
                ]);
                
                // Total count
                $sheet->setCellValue('D' . ($summaryRow + 2), 'Total Documents:');
                $sheet->setCellValue('E' . ($summaryRow + 2), $totalDataRows);
                $sheet->getStyle('D' . ($summaryRow + 2) . ':E' . ($summaryRow + 2))->applyFromArray([
                    'fill' => [
                        'fillType' => Fill::FILL_SOLID,
                        'color' => ['rgb' => 'DDEBF7'] // Light blue
                    ],
                    'borders' => [
                        'outline' => [
                            'borderStyle' => Border::BORDER_THIN,
                            'color' => ['rgb' => '5B9BD5']
                        ]
                    ]
                ]);
                $sheet->getStyle('E' . ($summaryRow + 2))->applyFromArray([
                    'alignment' => [
                        'horizontal' => Alignment::HORIZONTAL_CENTER
                    ],
                    'font' => ['bold' => true, 'size' => 12]
                ]);
                
                // Add percentage summary
                if ($totalDataRows > 0) {
                    $approvalRate = round(($approvedCount / $totalDataRows) * 100, 2);
                    
                    $sheet->setCellValue('A' . ($summaryRow + 4), 'Approval Rate:');
                    $sheet->setCellValue('B' . ($summaryRow + 4), $approvalRate . '%');
                    $sheet->getStyle('A' . ($summaryRow + 4) . ':B' . ($summaryRow + 4))->applyFromArray([
                        'fill' => [
                            'fillType' => Fill::FILL_SOLID,
                            'color' => ['rgb' => 'E2EFDA'] // Very light green
                        ],
                        'borders' => [
                            'outline' => [
                                'borderStyle' => Border::BORDER_MEDIUM,
                                'color' => ['rgb' => '70AD47']
                            ]
                        ],
                        'font' => ['bold' => true]
                    ]);
                    $sheet->getStyle('B' . ($summaryRow + 4))->applyFromArray([
                        'alignment' => [
                            'horizontal' => Alignment::HORIZONTAL_CENTER
                        ]
                    ]);
                }
                
                // Freeze panes (header row stays visible when scrolling)
                $sheet->freezePane('A' . ($dataStartRow + 1));
            },
        ];
    }
}