<?php

namespace App\Exports;

use Maatwebsite\Excel\Concerns\FromArray;
use Maatwebsite\Excel\Concerns\WithStyles;
use Maatwebsite\Excel\Concerns\WithColumnWidths;
use Maatwebsite\Excel\Concerns\WithEvents;
use Maatwebsite\Excel\Concerns\WithDrawings;
use Maatwebsite\Excel\Events\AfterSheet;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;
use PhpOffice\PhpSpreadsheet\Style\Alignment;
use PhpOffice\PhpSpreadsheet\Style\Border;
use PhpOffice\PhpSpreadsheet\Style\Fill;
use PhpOffice\PhpSpreadsheet\Style\Font;
use PhpOffice\PhpSpreadsheet\Worksheet\Drawing;
use App\Models\AuditResponsible;
use Illuminate\Support\Facades\Storage;

class AuditResultsExport implements FromArray, WithStyles, WithColumnWidths, WithEvents, WithDrawings
{
    protected $auditData;
    protected $currentRow = 1;
    protected $controlStartRows = [];
    protected $totalRows = 0;
    protected $drawings = [];
    protected $evidenceData = [];
    protected $imagePositions = []; // Track exact row positions for images
    protected $footerLeft = 'Generated by Audit System';
    protected $footerCenter = 'Confidential';
    protected $footerRight = 'Page 1 of 1';

    public function __construct($auditId)
    {
        $this->auditData = AuditResponsible::with([
            'frameworkControlTestAudits.FrameworkControlTestResult.testResult',
            'frameworkControlTestAudits.controlAuditEvidences.evidence',
            'frameworkControlTestAudits.controlAuditObjectives.controlControlObjective'
        ])->findOrFail($auditId);

        // Prepare evidence data for easy access
        $this->prepareEvidenceData();
    }

    protected function prepareEvidenceData()
    {
        $this->evidenceData = [];
        $rowCounter = 1;

        foreach ($this->auditData->frameworkControlTestAudits as $testAudit) {
            foreach ($testAudit->controlAuditEvidences as $evidence) {
                $this->evidenceData[$rowCounter] = [
                    'file_path' => $evidence->evidence->file_unique_name ?? null,
                    'file_name' => $evidence->evidence->file_name ?? 'N/A'
                ];
                $rowCounter++;
            }
        }
    }

    public function drawings()
    {
        return $this->drawings;
    }

    public function array(): array
    {
        $data = [];
        $currentDataRow = 0; // Track actual data array index

        // Report Header Section
        $data[] = ['AUDIT COMPLIANCE REPORT', '', '', '', '', '', '', ''];
        $data[] = ['', '', '', '', '', '', '', ''];
        $currentDataRow += 2;

        // Audit Information Section
        $data[] = [
            'Audit Name:',
            $this->auditData->audit_name,
            'Audit Type:',
            $this->getAuditTypeText($this->auditData->audit_type),
            'Audit Function:',
            $this->getAuditFunctionText($this->auditData->audit_function),
            'Generated:',
            date('Y-m-d H:i:s'),
            ''
        ];
        $data[] = ['Responsible:', $this->auditData->owner->name, '', 'Framework:', $this->auditData->frameworkaduit->name, '', ''];
        $data[] = ['', '', '', '', '', '', '', ''];
        $currentDataRow += 3;

        // Summary Section
        $totalControls = $this->auditData->frameworkControlTestAudits->count();
        $passedControls = $this->auditData->frameworkControlTestAudits->where('action_status', 1)->count();
        $failedControls = $totalControls - $passedControls;

        $data[] = ['EXECUTIVE SUMMARY', '', '', '', '', '', '', ''];
        $data[] = ['', '', '', '', '', '', '', ''];
        $data[] = ['Total Controls:', $totalControls, '', 'Passed:', $passedControls, '', 'Failed:', $failedControls];
        $data[] = ['Compliance Rate:', round(($passedControls / max($totalControls, 1)) * 100, 2) . '%', '', '', '', '', ''];
        $data[] = ['', '', '', '', '', '', '', ''];
        $currentDataRow += 5;

        // Controls Detail Section
        $data[] = ['CONTROL DETAILS', '', '', '', '', '', '', ''];
        $data[] = ['', '', '', '', '', '', '', ''];
        $currentDataRow += 2;

        foreach ($this->auditData->frameworkControlTestAudits as $index => $testAudit) {
            $this->controlStartRows[] = $currentDataRow;

            // Control Header with enhanced information
            $data[] = ['', '', '', '', '', '', '', ''];
            $currentDataRow += 1;

            $data[] = [
                'CONTROL ' . ($index + 1),
                $testAudit->name,
                '',
                'STATUS',
                $this->getStatusOpenClosedText($testAudit->action_status),
                'RESULT',
                $testAudit->FrameworkControlTestResult->testResult->name ?? 'N/A',
                ''
            ];
            $currentDataRow += 1;

            $data[] = ['', '', '', '', '', '', '', ''];
            $currentDataRow += 1;

            // Control Details Table
            $data[] = ['', 'Attribute', 'Value', '', 'Metrics', 'Count', '', ''];
            $data[] = ['', 'Control ID', $testAudit->id, '', 'Objectives', $testAudit->controlAuditObjectives->count(), '', ''];
            $data[] = ['', 'Created Date', $this->formatDate($testAudit->created_at), '', 'Evidence Items', $testAudit->controlAuditEvidences->count(), '', ''];
            $data[] = ['', 'Last Updated', $this->formatDate($testAudit->updated_at), '', 'Completion', $this->calculateCompletionRate($testAudit) . '%', '', ''];
            $data[] = ['', '', '', '', '', '', '', ''];
            $currentDataRow += 5;

            // Objectives Section
            if ($testAudit->controlAuditObjectives->count() > 0) {
                $data[] = ['', 'CONTROL OBJECTIVES', '', '', '', '', '', ''];
                $data[] = ['', '', '', '', '', '', '', ''];
                $data[] = ['', '#', 'Objective Name', 'Status', 'Comments', 'Assessment Date', '', ''];
                $currentDataRow += 3;

                foreach ($testAudit->controlAuditObjectives as $objIndex => $objective) {
                    $data[] = [
                        '',
                        $objIndex + 1,
                        $objective->controlControlObjective->objective->name ?? 'N/A',
                        $this->getObjectiveStatus($objective->objective_audit_status),
                        $objective->objective_audit_comments ?? '-',
                        $this->formatDate($objective->created_at),
                        '',
                        ''
                    ];
                    $currentDataRow += 1;
                }
                $data[] = ['', '', '', '', '', '', '', ''];
                $currentDataRow += 1;
            }

            // Evidence Section
            if ($testAudit->controlAuditEvidences->count() > 0) {
                $data[] = ['', 'SUPPORTING EVIDENCE', '', '', '', '', '', ''];
                $data[] = ['', '', '', '', '', '', '', ''];
                $data[] = ['', '#', 'Evidence Name', 'Status', 'Description', 'Upload Date', 'File Type', 'File'];
                $currentDataRow += 3;

                foreach ($testAudit->controlAuditEvidences as $evIndex => $evidence) {
                    $fileName = $evidence->evidence->file_name ?? 'N/A';
                    $filePath = $evidence->evidence->file_unique_name ?? null;
                    $fileType = pathinfo($fileName, PATHINFO_EXTENSION);

                    // Check if file exists and is image
                    $exists = $filePath ? Storage::disk('local')->exists($filePath) : false;
                    $isImage = $exists ? $this->isImageFile($filePath) : false;

                    // For image cells, we'll leave empty as the image will be placed here
                    $fileCellValue = $exists ? ($isImage ? '' : 'View File') : 'File Missing';

                    $data[] = [
                        '',
                        $evIndex + 1,
                        $fileName,
                        $this->getEvidenceStatus($evidence->evidence_audit_status),
                        $evidence->evidence->description ?? '-',
                        $this->formatDate($evidence->created_at),
                        strtoupper($fileType),
                        $fileCellValue // This will be empty for images
                    ];
                    $currentDataRow += 1;

                    // For existing image files, add them as drawings in the EXACT same row
                    if ($exists && $isImage) {
                        $drawing = new Drawing();
                        $drawing->setName($fileName);
                        $drawing->setDescription($evidence->evidence->description ?? '');
                        $drawing->setPath(storage_path('app/' . $filePath));

                        // Set image size (max 200x200px, maintaining aspect ratio)
                        list($width, $height) = getimagesize(storage_path('app/' . $filePath));
                        $ratio = $width / $height;
                        if ($ratio > 1) {
                            $drawing->setWidth(200);
                            $drawing->setHeight(200 / $ratio);
                        } else {
                            $drawing->setHeight(200);
                            $drawing->setWidth(200 * $ratio);
                        }

                        // Position in the H column of the CURRENT row (Excel rows start from 1)
                        $excelRowNumber = $currentDataRow; // This is the exact row where this evidence entry is
                        $drawing->setCoordinates('H' . $excelRowNumber);

                        // Store the position for row height adjustment
                        $this->imagePositions[] = $excelRowNumber;

                        $this->drawings[] = $drawing;
                    }
                }
                $data[] = ['', '', '', '', '', '', '', ''];
                $currentDataRow += 1;
            }
        }

        $currentDataRow += 4;

        $this->totalRows = count($data);
        return $data;
    }

    public function styles(Worksheet $sheet)
    {
        return [
            // Default style for all cells
            'A:H' => [
                'font' => ['size' => 10],
                'alignment' => ['vertical' => Alignment::VERTICAL_CENTER]
            ]
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 14,   // Spacer/Index
            'B' => 25,  // Main content
            'C' => 30,  // Details
            'D' => 15,  // Status/Type
            'E' => 25,  // Additional info
            'F' => 18,  // Dates/Counts
            'G' => 15,  // File types/Results
            'H' => 25   // File column (wider for images)
        ];
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function (AfterSheet $event) {
                $sheet = $event->sheet->getDelegate();

                // Main title styling
                $this->styleMainTitle($sheet);

                // Audit info section
                $this->styleAuditInfo($sheet);

                // Summary section
                $this->styleSummarySection($sheet);

                // Controls section
                $this->styleControlsSection($sheet);

                // Apply borders and general formatting
                $this->applyGeneralFormatting($sheet);

                // Add hyperlinks for non-image files
                for ($row = 1; $row <= $this->totalRows; $row++) {
                    $cellValue = $sheet->getCell('H' . $row)->getValue();
                    if ($cellValue === 'View File') {
                        $sheet->getStyle('H' . $row)
                            ->getFont()
                            ->setColor(new \PhpOffice\PhpSpreadsheet\Style\Color(\PhpOffice\PhpSpreadsheet\Style\Color::COLOR_BLUE))
                            ->setUnderline(true);
                    }
                }

                // Auto-fit row heights for regular rows
                for ($row = 1; $row <= $this->totalRows; $row++) {
                    $sheet->getRowDimension($row)->setRowHeight(-1);
                }

                // Set specific row heights for rows with images
                foreach ($this->imagePositions as $imageRow) {
                    $sheet->getRowDimension($imageRow)->setRowHeight(150); // Tall enough for images
                }

                // Enable text wrapping
                $sheet->getStyle('A1:H' . $this->totalRows)
                    ->getAlignment()
                    ->setWrapText(true);

                // Add page numbering to footer
                $sheet->getHeaderFooter()
                    ->setOddFooter('&L' . $this->footerLeft . ' &C' . $this->footerCenter . ' &RPage &P of &N');
            }
        ];
    }


    private function isImageFile($filePath)
    {
        $imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'svg'];
        $extension = strtolower(pathinfo($filePath, PATHINFO_EXTENSION));
        return in_array($extension, $imageExtensions);
    }

    private function styleMainTitle($sheet)
    {
        // Main title
        $sheet->mergeCells('A1:H1');
        $sheet->getStyle('A1:H1')->applyFromArray([
            'font' => [
                'bold' => true,
                'size' => 18,
                'color' => ['rgb' => 'FFFFFF']
            ],
            'fill' => [
                'fillType' => Fill::FILL_SOLID,
                'startColor' => ['rgb' => '1B365D']
            ],
            'alignment' => [
                'horizontal' => Alignment::HORIZONTAL_CENTER,
                'vertical' => Alignment::VERTICAL_CENTER
            ]
        ]);
        $sheet->getRowDimension(1)->setRowHeight(35);
    }

    private function styleAuditInfo($sheet)
    {
        // Audit information headers - apply same style to both audit name and audit type sections
        $infoRows = [3, 4];
        foreach ($infoRows as $row) {
            // Style all header cells with the same color scheme
            $sheet->getStyle("A{$row}:B{$row}")->applyFromArray([
                'font' => ['bold' => true, 'color' => ['rgb' => '2F5F8F']],
                'fill' => [
                    'fillType' => Fill::FILL_SOLID,
                    'startColor' => ['rgb' => 'E6F1FF']
                ]
            ]);

            $sheet->getStyle("D{$row}:E{$row}")->applyFromArray([
                'font' => ['bold' => true, 'color' => ['rgb' => '2F5F8F']],
                'fill' => [
                    'fillType' => Fill::FILL_SOLID,
                    'startColor' => ['rgb' => 'E6F1FF']
                ]
            ]);

            $sheet->getStyle("G{$row}:H{$row}")->applyFromArray([
                'font' => ['bold' => true, 'color' => ['rgb' => '2F5F8F']],
                'fill' => [
                    'fillType' => Fill::FILL_SOLID,
                    'startColor' => ['rgb' => 'E6F1FF']
                ]
            ]);
        }

        // Style the data cells (values) to have consistent appearance
        foreach ($infoRows as $row) {
            $sheet->getStyle("B{$row}")->applyFromArray([
                'font' => ['color' => ['rgb' => '1B365D']]
            ]);

            $sheet->getStyle("E{$row}")->applyFromArray([
                'font' => ['color' => ['rgb' => '1B365D']]
            ]);

            $sheet->getStyle("H{$row}")->applyFromArray([
                'font' => ['color' => ['rgb' => '1B365D']]
            ]);
        }
    }

    private function styleSummarySection($sheet)
    {
        // Summary title
        $sheet->mergeCells('A6:H6');
        $sheet->getStyle('A6:H6')->applyFromArray([
            'font' => [
                'bold' => true,
                'size' => 14,
                'color' => ['rgb' => 'FFFFFF']
            ],
            'fill' => [
                'fillType' => Fill::FILL_SOLID,
                'startColor' => ['rgb' => '2E7D32']
            ],
            'alignment' => [
                'horizontal' => Alignment::HORIZONTAL_CENTER,
                'vertical' => Alignment::VERTICAL_CENTER
            ]
        ]);

        // Summary data styling
        $sheet->getStyle('A8:H10')->applyFromArray([
            'fill' => [
                'fillType' => Fill::FILL_SOLID,
                'startColor' => ['rgb' => 'F1F8E9']
            ],
            'font' => ['bold' => true]
        ]);
    }

    private function styleControlsSection($sheet)
    {
        // Controls section title
        $sheet->mergeCells('A11:H11');
        $sheet->getStyle('A11:H11')->applyFromArray([
            'font' => [
                'bold' => true,
                'size' => 14,
                'color' => ['rgb' => 'FFFFFF']
            ],
            'fill' => [
                'fillType' => Fill::FILL_SOLID,
                'startColor' => ['rgb' => 'D32F2F']
            ],
            'alignment' => [
                'horizontal' => Alignment::HORIZONTAL_CENTER,
                'vertical' => Alignment::VERTICAL_CENTER
            ]
        ]);

        // Style control headers throughout the sheet
        for ($row = 13; $row <= $this->totalRows; $row++) {
            $cellValue = $sheet->getCell('A' . $row)->getValue();

            // Control headers
            if (strpos($cellValue, 'CONTROL ') === 0) {
                $sheet->getStyle("A{$row}:H{$row}")->applyFromArray([
                    'font' => [
                        'bold' => true,
                        'size' => 12,
                        'color' => ['rgb' => 'FFFFFF']
                    ],
                    'fill' => [
                        'fillType' => Fill::FILL_SOLID,
                        'startColor' => ['rgb' => '3F51B5']
                    ]
                ]);
                $sheet->getRowDimension($row)->setRowHeight(25);
            }

            // Section headers (OBJECTIVES, EVIDENCE, etc.)
            $bCellValue = $sheet->getCell('B' . $row)->getValue();
            if (in_array($bCellValue, ['CONTROL OBJECTIVES', 'SUPPORTING EVIDENCE'])) {
                $sheet->getStyle("B{$row}:G{$row}")->applyFromArray([
                    'font' => [
                        'bold' => true,
                        'color' => ['rgb' => 'FFFFFF']
                    ],
                    'fill' => [
                        'fillType' => Fill::FILL_SOLID,
                        'startColor' => ['rgb' => '607D8B']
                    ]
                ]);
            }

            // Table headers
            if ($bCellValue === '#' || $bCellValue === 'Attribute') {
                $sheet->getStyle("A{$row}:H{$row}")->applyFromArray([
                    'font' => ['bold' => true],
                    'fill' => [
                        'fillType' => Fill::FILL_SOLID,
                        'startColor' => ['rgb' => 'CFD8DC']
                    ]
                ]);
            }
        }
    }

    private function applyGeneralFormatting($sheet)
    {
        // Apply borders to main content area
        $sheet->getStyle('A1:H' . $this->totalRows)
            ->getBorders()
            ->getOutline()
            ->setBorderStyle(Border::BORDER_MEDIUM);

        // Apply thin borders to content cells
        for ($row = 3; $row <= $this->totalRows; $row++) {
            if (!empty($sheet->getCell('B' . $row)->getValue())) {
                $sheet->getStyle("A{$row}:H{$row}")
                    ->getBorders()
                    ->getAllBorders()
                    ->setBorderStyle(Border::BORDER_THIN);
            }
        }
    }

    private function formatDate($date)
    {
        if (!$date) return '-';

        if (is_string($date)) {
            try {
                return date('M j, Y', strtotime($date));
            } catch (Exception $e) {
                return $date;
            }
        }

        if (method_exists($date, 'format')) {
            return $date->format('M j, Y');
        }

        return '-';
    }

    private function calculateCompletionRate($testAudit)
    {
        $totalItems = $testAudit->controlAuditObjectives->count() + $testAudit->controlAuditEvidences->count();
        if ($totalItems === 0) return 100;

        $completedObjectives = $testAudit->controlAuditObjectives
            ->whereNotNull('objective_audit_status')
            ->where('objective_audit_status', '!=', 'no_action')
            ->count();

        $completedEvidence = $testAudit->controlAuditEvidences
            ->whereNotNull('evidence_audit_status')
            ->where('evidence_audit_status', '!=', 'no_action')
            ->count();

        return round((($completedObjectives + $completedEvidence) / $totalItems) * 100);
    }

    private function getStatusOpenClosedText($status)
    {
        return $status == 1 ? '✓ CLOSED' : '⚠ OPEN';
    }

    private function getObjectiveStatus($status)
    {
        $statuses = [
            'approved' => '✓ APPROVED',
            'rejected' => '✗ REJECTED',
            'no_action' => '👁 REVIEW'
        ];
        return $statuses[$status] ?? '❓ ' . strtoupper($status);
    }

    private function getEvidenceStatus($status)
    {
        $statuses = [
            'approved' => '✓ APPROVED',
            'rejected' => '✗ REJECTED',
            'no_action' => '👁 REVIEW'
        ];
        return $statuses[$status] ?? '❓ ' . strtoupper($status);
    }
    private function getAuditTypeText($type)
    {
        return $type == 1
            ? __('locale.Internal')
            : __('locale.External');
    }
    private function getAuditFunctionText($type)
    {
        return $type == 1
            ? __('locale.New')
            : __('locale.Archieved');
    }
}