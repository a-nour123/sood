<?php

namespace App\Console\Commands;

use App\Models\Asset;
use App\Models\Vulnerability;
use Carbon\Carbon;
use Illuminate\Console\Command;

class vulnerabilityStatus extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'vulnerabilityStatus';
    protected $description = 'Check the vulnerability status';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return int
     */
    public function handle()
    {
        $today = now()->toDateString();

        $vulnerabilities = Vulnerability::with('assets')
            ->select('id', 'severity', 'first_discovered')
            ->get();
        
        $severityRules = [
            'Critical' => [1 => 21, 2 => 10, 3 => 7, 4 => 2, 5 => 1],
            'High' => [1 => 30, 2 => 21, 3 => 10, 4 => 3, 5 => 2],
            'Medium' => [1 => 40, 2 => 30, 3 => 21, 4 => 5, 5 => 3],
            'Low' => [1 => 50, 2 => 40, 3 => 30, 4 => 7, 5 => 5],
        ];
        
        foreach ($vulnerabilities as $vulnerability) {
            foreach ($vulnerability->assets as $asset) {
                $severity = $vulnerability->severity;
                $assetValueId = $asset->asset_value_id;
        
                if (array_key_exists($severity, $severityRules) && array_key_exists($assetValueId, $severityRules[$severity])) {
                    $daysToSkip = $severityRules[$severity][$assetValueId];
        
                    if ($today > Carbon::parse($vulnerability->first_discovered)->addDays($daysToSkip)->toDateString()) {
                        // Update the status of the related vulnerability
                        $vulnerability->update(['status' => 'Overdue']);
                    }
                }
            }
        }   
     }
}
