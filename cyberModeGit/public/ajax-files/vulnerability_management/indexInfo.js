//select2 class
$(document).ready(function () {
    $(".multiple-select2").select2();
});

// function to show error validation
function showError(data) {
    $(".error").empty();
    $.each(data, function (key, value) {
        $(".error-" + key).empty();
        $(".error-" + key).append(value);
    });
}

// status [warning, success, error]
function makeAlert($status, message, title) {
    // On load Toast
    if (title == "Success") title = "ðŸ‘‹" + title;
    toastr[$status](message, title, {
        closeButton: true,
        tapToDismiss: false,
    });
}

// Submit form for creating asset
$("#add-new-vulnerability-management form").on("submit", function (e) {
    e.preventDefault();
    $.ajax({
        url: $(this).attr("action"),
        type: "POST",
        data: $(this).serialize(),
        success: function (data) {
            if (data.status) {
                makeAlert("success", data.message, lang["success"]);
                $("#add-new-vulnerability-management").modal("hide");
                redrawDatatable();
            } else {
                showError(data["errors"]);
            }
        },
        error: function (response, data) {
            responseData = response.responseJSON;
            makeAlert("error", responseData.message, lang["error"]);
            showError(responseData.errors);
        },
    });
});

// Submit form for editing asset
$("#edit-vulnerability-management form").on("submit", function (e) {
    e.preventDefault();
    const id = $(this).find('input[name="id"]').val();
    let url = URLs["update"];
    url = url.replace(":id", id);
    $.ajax({
        url: url,
        type: "PUT",
        data: $(this).serialize(),
        success: function (data) {
            if (data.status) {
                makeAlert("success", data.message, lang["success"]);
                $("#edit-vulnerability-management form").trigger("reset");
                $("#edit-vulnerability-management").modal("hide");
                redrawDatatable();
            } else {
                showError(data["errors"]);
            }
        },
        error: function (response, data) {
            responseData = response.responseJSON;
            makeAlert("error", responseData.message, lang["error"]);
            showError(responseData.errors);
        },
    });
});

function DeleteVulnerability(id) {
    let url = URLs["delete"];
    url = url.replace(":id", id);
    $.ajax({
        url: url,
        type: "DELETE",
        headers: {
            "X-CSRF-TOKEN": $('meta[name="csrf-token"]').attr("content"),
        },
        success: function (data) {
            if (data.status) {
                makeAlert("success", data.message, lang["success"]);
                redrawDatatable();
            }
        },
        error: function (response, data) {
            responseData = response.responseJSON;
            makeAlert("error", responseData.message, lang["error"]);
        },
    });
}

// Show modal for editing
function ShowModalEditVulnerability(id) {
    let url = URLs["edit"];
    url = url.replace(":id", id);
    $.ajax({
        url: url,
        type: "GET",
        headers: {
            "X-CSRF-TOKEN": $('meta[name="csrf-token"]').attr("content"),
        },
        success: function (response) {
            if (response.status) {
                const editForm = $("#edit-vulnerability-management form");

                // Start Assign Vulnerability data to modal
                editForm.find('input[name="id"]').val(id);
                editForm
                    .find("input[name='plugin_id']")
                    .val(response.data.plugin_id);
                editForm.find("input[name='name']").val(response.data.name);
                editForm.find("input[name='cve']").val(response.data.cve);
                editForm
                    .find("input[name='netbios_name']")
                    .val(response.data.netbios_name);
                editForm
                    .find("input[name='dns_name']")
                    .val(response.data.dns_name);
                editForm.find("input[name='port']").val(response.data.port);
                editForm
                    .find("input[name='protocol']")
                    .val(response.data.protocol);
                editForm
                    .find(
                        "[name='ip_address'] option[value='" +
                        response.data.ip_address +
                        "']"
                    )
                    .prop("selected", true)
                    .trigger("change");
                editForm
                    .find(
                        "[name='exploit'] option[value='" +
                        response.data.exploit +
                        "']"
                    )
                    .prop("selected", true)
                    .trigger("change");

                // var ipAssets = response.data.ip_assets;
                // var assetsOptions =
                //   '<option value="" disabled>' + lang['selectOption'] + '</option>';
                // $.each(ipAssets, function (index, asset) {
                //   assetsOptions += '<option value="' + asset.id + '">' +
                //     asset.name + '</option>'
                // });

                // editForm.find(`[name='assets[]']`).html(assetsOptions).trigger('change');
                assets = response.data.assets;
                getIpAssets("#edit-vulnerability-management", assets);

                response.data.teams.forEach((teamId) => {
                    editForm
                        .find(
                            `select[name='teams[]'] option[value='${teamId}']`
                        )
                        .attr("selected", true)
                        .trigger("change");
                });
                editForm
                    .find(
                        `select[name='severity'] option[value='${response.data.severity}']`
                    )
                    .attr("selected", true)
                    .trigger("change");
                editForm
                    .find("textarea[name='synopsis']")
                    .val(response.data.synopsis);
                editForm
                    .find("textarea[name='description']")
                    .val(response.data.description);
                editForm
                    .find("textarea[name='recommendation']")
                    .val(response.data.recommendation);
                editForm.find("textarea[name='plan']").val(response.data.plan);
                editForm
                    .find("input[name='first_discovered']")
                    .val(response.data.first_discovered);
                editForm
                    .find("input[name='last_observed']")
                    .val(response.data.last_observed);
                editForm
                    .find("input[name='plugin_publication_date']")
                    .val(response.data.plugin_publication_date);
                editForm
                    .find("input[name='plugin_modification_date']")
                    .val(
                        response.data.plugin_modification_date);

                editForm
                    .find(
                        `select[name='status'] option[value='${response.data.status}']`
                    )
                    .attr("selected", true)
                    .trigger("change");
                // End Assign Vulnerability data to modal
                $(".dtr-bs-modal").modal("hide");
                $("#edit-vulnerability-management").modal("show");
            }
            // alert(1);
        },
        error: function (response, data) {
            responseData = response.responseJSON;
            makeAlert("error", responseData.message, lang["error"]);
        },
    });
}


// Show delete alert modal
function ShowModalDeleteVulnerability(id) {
    $(".dtr-bs-modal").modal("hide");
    Swal.fire({
        title: lang["confirmDeleteRecordMessage"],
        text: lang["revert"],
        icon: "question",
        showCancelButton: true,
        confirmButtonText: lang["confirmDelete"],
        cancelButtonText: lang["cancel"],
        customClass: {
            confirmButton: "btn btn-relief-success ms-1",
            cancelButton: "btn btn-outline-danger ms-1",
        },
        buttonsStyling: false,
    }).then(function (result) {
        if (result.value) {
            DeleteVulnerability(id);
        }
    });
}

function getIpAssets(formType, selectedAssets) {
    var url = URLs["get_ip_assets"];
    var ipAddress = $(formType + ' select[name="ip_address"]').val();
    var csrfToken = $('meta[name="csrf-token"]').attr("content"); // Retrieve CSRF token from meta tag

    $.ajax({
        url: url,
        type: "POST",
        data: {
            ip_address: ipAddress,
            _token: csrfToken,
        },
        success: function (response) {
            var assets = response;
            var assetsOptions =
                '<option value="" disabled>' +
                lang["selectOption"] +
                "</option>";
            $.each(assets, function (index, asset) {
                // console.log(asset.id)
                assetsOptions +=
                    '<option value="' +
                    asset.id +
                    '">' +
                    asset.name +
                    "</option>";
            });
            $(formType + ' [name="assets[]"]')
                .html(assetsOptions)
                .trigger("change");

            if (selectedAssets) {
                selectedAssets.forEach((assetId) => {
                    $(
                        `${formType} [name="assets[]"] option[value='${assetId}']`
                    )
                        .prop("selected", true)
                        .trigger("change");
                });
            }
        },
    });
}

$('#add-new-vulnerability-management [name="ip_address"]').change(function () {
    getIpAssets("#add-new-vulnerability-management");
});

$('#edit-vulnerability-management [name="ip_address"]').change(function () {
    getIpAssets("#edit-vulnerability-management");
});

// Reset form
function resetFormData(form) {
    $(".error").empty();
    form.trigger("reset");
    form.find('input:not([name="_token"])').val("");
    form.find("select.multiple-select2 option[selected]").attr(
        "selected",
        false
    );
    form.find("select.select2 option").attr("selected", false);
    form.find("select.select2").each(function (index) {
        $(this).find("option").first().attr("selected", true);
    });
    form.find("select").trigger("change");
}

$(".modal").on("hidden.bs.modal", function () {
    resetFormData($(this).find("form"));
});

drawDatatable(
    // columnsData
    [
        { data: "id", orderable: false },
        { data: "plugin_id", orderable: false },
        { data: "name", orderable: false },
        { data: "cve", orderable: false },
        { data: "assets", orderable: false },
         { data: "severity", orderable: false },
        { data: "dns_name", orderable: false },
        { data: "netbios_name", orderable: false },
        { data: "status", orderable: false },
        { data: "tenable_status", orderable: false },
        { data: "port", orderable: false },
        { data: "exploit", orderable: false },
        { data: "first_discovered", orderable: false },
        { data: "regions", orderable: false },
        { data: "description", orderable: false },
        { data: "Actions", orderable: false },
    ],
    // columnDefinitions
    [
 
        {
            targets: -2, // Index for 'description'
            render: function (data, type, full, meta) {
                const previewText = data.length > 100 
                    ? data.substring(0, 50) + `<span style="color: #2196F3; cursor: pointer;">... See more</span>` 
                    : data;
                return `
                    <span class="description-preview" onclick="showDescriptionInModal('${data}')">
                        ${previewText}
                    </span>
                `;
            },
        },
        {
            // Actions
            targets: -1,
            orderable: false,
            render: function (data, type, full, meta) {
                let returnedString = "";

                if (permission["delete"]) {
                    returnedString +=
                        '<a href="javascript:;" onclick="ShowModalDeleteVulnerability(' +
                        full.id + // Use full.id for deleting specific record
                        ')" class="item-delete">' +
                        feather.icons["trash-2"].toSvg({
                            class: "me-50 font-small-4",
                        }) +
                        "</a>";
                }

                if (permission["edit"]) {
                    returnedString +=
                        '<a href="javascript:;" onclick="ShowModalEditVulnerability(' +
                        full.id + // Use full.id for editing specific record
                        ')" class="item-edit">' +
                        feather.icons["edit"].toSvg({ class: "font-small-4" }) +
                        "</a>";
                }

                if (returnedString === "") returnedString = "------";

                return returnedString;
            },
        },
        {
            // Label for status
            targets: -2, // Targets 'status'
            render: function (data, type, full, meta) {
                return lang[data] || data; // Return translation or the original data
            },
        },
        {
            // Label for severity
            targets: -3, // Targets 'severity'
            render: function (data, type, full, meta) {
                return lang[data] || data; // Return translation or the original data
            },
        },
        {
            // Label for status
            targets: -8, // Targets 'assets'
            render: function (data, type, full, meta) {
                // If you want to show assets, use the actual 'assets' property
                return full.status ? full.status : "No assets available";
            },
        },
        {
            // Label for tenable_status
            targets: -7, // Targets 'tenable_status'
            render: function (data, type, full, meta) {
                return lang[full.tenable_status] || full.tenable_status ? full.tenable_status : 'No Status'; // Use language translation or fallback to raw data
            },
        },
    ],
    // detailsOfItem
    lang["DetailsOfItem"],
    // detailsOfItemKey
    "name"
);
// Add the toggle function
function toggleDescription(id) {
    const fullDescription = document.getElementById(`description-full-${id}`);
    const seeMoreLink = document.getElementById(`see-more-${id}`);
    const seeLessLink = document.getElementById(`see-less-${id}`);

    if (fullDescription.style.display === 'none') {
        fullDescription.style.display = 'block'; // Show full description
        seeMoreLink.style.display = 'none'; // Hide "See More"
        seeLessLink.style.display = 'inline'; // Show "See Less"
    } else {
        fullDescription.style.display = 'none'; // Hide full description
        seeMoreLink.style.display = 'inline'; // Show "See More"
        seeLessLink.style.display = 'none'; // Hide "See Less"
    }
}



// dataPickr custom for compliance
dateTimePickr = $(".flatpickr-date-time-compliance");
// Date & TIme
if (dateTimePickr.length) {
    dateTimePickr.flatpickr({
        enableTime: true,
        enableSeconds: true,
    });
}
