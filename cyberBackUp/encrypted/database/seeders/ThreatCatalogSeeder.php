<?php
bolt_decrypt( __FILE__ , 'Ru34Zn'); return 0;
##!!!##