<?php
bolt_decrypt( __FILE__ , 'ZhU8r6'); return 0;
##!!!##