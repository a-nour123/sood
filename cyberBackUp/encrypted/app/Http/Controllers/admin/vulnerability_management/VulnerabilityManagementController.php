<?php
bolt_decrypt( __FILE__ , '8wTVYE'); return 0;
##!!!##