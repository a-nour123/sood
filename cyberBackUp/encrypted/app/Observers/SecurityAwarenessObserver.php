<?php
bolt_decrypt( __FILE__ , 'SFgFnC'); return 0;
##!!!##