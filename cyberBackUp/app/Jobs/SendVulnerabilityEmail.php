<?php

namespace App\Jobs;

use App\Http\Traits\NotificationHandlingTrait;
use App\Models\Action;
use App\Models\Vulnerability;
use PHPMailer\PHPMailer\Exception;
use PHPMailer\PHPMailer\PHPMailer;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class SendVulnerabilityEmail implements ShouldQueue
{
    use NotificationHandlingTrait;

    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    protected $vulnData;

    public function __construct($vulnData)
    {
        $this->vulnData = $vulnData;
    }

    public function handle()
    {
        $subject = 'Vulnerability Notification Update';
        $bodyContent = $this->generateEmailBody(); // Generate the email body as before

        $this->sendEmail($bodyContent, $subject);
        $this->HandelNotification();
    }

    public function sendEmail($bodyContent, $subject)
    {
        $emailTo = $this->vulnData['email']; // Email address of the asset owner
        $emailConfig = DB::table('email_config')->first();

        if (!$emailConfig) {
            // Handle the case where email configuration is not found
            Log::error('Email configuration not found');
            return; // Just log the error
        }

        $mail = new PHPMailer(true);
        $mail->CharSet = 'UTF-8';

        try {
            $mail->isSMTP();
            $mail->isHTML(true);
            $mail->SMTPDebug = false;
            $mail->Mailer = "smtp";
            $mail->SMTPAuth = false;
            $mail->Port = $emailConfig->smtp_port;
            $mail->Host = $emailConfig->smtp_server;
            $mail->Username = $emailConfig->smtp_username;
            $mail->Password = base64_decode($emailConfig->smtp_password);
            $mail->SMTPSecure = $emailConfig->ssl_tls;
            $mail->addAddress($emailTo);
            $mail->setFrom($emailConfig->smtp_from_username, $emailConfig->smtp_username);


            $header = '
            <table width="100%" cellpadding="0" cellspacing="0" style="border-bottom:1px solid #DDD; padding-bottom:10px;">
                <tr>
                    <td style="text-align: center; vertical-align: middle;">
                        <h2 style="font-family: Arial, sans-serif; color: #333; margin: 0;">GRC Platform </h2>

                    </td>
                </tr>
            </table>';

            $subjectStyled = '
            <table width="100%" cellpadding="0" cellspacing="0" style="margin-bottom: 20px;">
                <tr>
                    <td style="text-align: center; font-family: Arial, sans-serif; font-size: 20px; font-weight: bold;">
                        <br>
                        ' . $subject . '
                    </td>
                </tr>
            </table>';

            $bodyStyled = '
                    <table width="100%" cellpadding="0" cellspacing="0" style="margin-bottom: 20px;">
                        <tr>
                            <td style="font-family: Arial, sans-serif; font-size: 14px; line-height: 1.6; padding: 20px;">
                                ' . $bodyContent . '
                            </td>
                        </tr>
                    </table>';

            $footer = '
            <table width="100%" cellpadding="0" cellspacing="0" style="margin-top: 20px;">
                <tr>
                    <td style="text-align: center;">
                        <a href="' .  env('APP_URL') . '/admin/vulnerability-management"
                        style="display: inline-block; padding: 12px 24px; background-color: #0097a7;
                        color: white; text-decoration: none; border-radius: 5px; font-weight: bold;
                        font-size: 13px;">Go to Vulnerability Management</a>
                    </td>
                </tr>
            </table>';


            $emailBody = '
            <table width="100%" cellpadding="0" cellspacing="0" style="background-color: #f8f8f8; padding: 20px;">
                <tr>
                    <td>
                        <table width="550" cellpadding="0" cellspacing="0" style="margin: 0 auto; background-color: #ffffff; border: 1px solid #DDD; padding: 20px;">
                            <tr>
                                <td>
                                    ' . $header . '
                                    ' . $subjectStyled . '
                                    ' . $bodyStyled . '
                                    ' . $footer . '
                                </td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>';


            $mail->Subject = $subject;
            $mail->Body = $emailBody;

            $mail->SMTPOptions = [
                'ssl' => [
                    'verify_peer' => false,
                    'verify_peer_name' => false,
                ],
            ];

            $mail->send();
            Log::info("Email sent to: $emailTo");
        } catch (Exception $e) {
            // Log the error message for debugging
            Log::error('Email sending failed: ' . $e->getMessage());
        }
    }


    protected function generateEmailBody()
    {
        // Start building the body with a greeting and a message
        $body = '<h1 style="font-family: Arial, sans-serif; color: #333;">Vulnerability Notifications</h1>';
        $body .= '<p style="font-family: Arial, sans-serif; color: #555;">';
        $body .= 'Please review the following vulnerabilities and update their statuses as necessary.';
        $body .= '</p>';

        // Build the table
        $body .= '<table style="width: 100%; border-collapse: collapse; margin-top: 20px;">';
        $body .= '<tr style="background-color: #f2f2f2; text-align: left;">';
        $body .= '<th style="padding: 10px; border: 1px solid #ddd; color: #333;">Vulnerability Name</th>';
        $body .= '<th style="padding: 10px; border: 1px solid #ddd; color: #333;">Status</th>';
        $body .= '<th style="padding: 10px; border: 1px solid #ddd; color: #333;">Severity</th>';
        $body .= '</tr>';

        // Fetch vulnerabilities
        $vulns = $this->vulnData['vulnerabilities'];

        foreach ($vulns as $vuln) {
            $body .= '<tr>';
            $body .= '<td style="padding: 10px; border: 1px solid #ddd; color: #0097a7;">' . htmlspecialchars($vuln['name']) . '</td>';
            $body .= '<td style="padding: 10px; border: 1px solid #ddd; color: #0097a7;">' . htmlspecialchars($vuln['status']) . '</td>';
            $body .= '<td style="padding: 10px; border: 1px solid #ddd; color: #0097a7;">' . htmlspecialchars($vuln['severity']) . '</td>';
            $body .= '</tr>';
        }

        $body .= '</table>';

        // Get the app URL from the config
        $appURL = env('APP_URL');
        $link = rtrim($appURL, '/') . '/admin/vulnerability-management'; // Ensure the URL is correct


        return $body;
    }

    public function HandelNotification()
    {
        // Get the action ID for Risk_Add
        $action1 = Action::where('name', 'AlertSuccessfullySenttoAssetOwner')->first();
        $actionId1 = $action1['id'];

        // Get the risk object from the event
        $vuln = [];
        $roles = [];

        //defining the link we want user to be redirected to after clicking the system notification
        $link = ['link' => route('admin.vulnerability_management.index')];
        $actionId2 = null;
        $nextDateNotify = null;
        $modelId = null;
        $modelType = null;
        $proccess = null;
        // handling different kinds of notifications using  "sendNotificationForAction" function from "NotificationHandlingTrait"
        $this->sendNotificationForAction($actionId1, $actionId2 = null, $link, $vuln, $roles, $nextDateNotify = null, $modelId = null, $modelType = null, $proccess = null);
    }
}
